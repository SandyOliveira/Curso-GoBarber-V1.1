criar arquivo package.json
>>yarn init -y
DEpendencia Express
>> yarn add express

Rodar servidor
>> node src/server.js

Importar modulos  com sucrase e nodemon dentro do Node
>> yarn add sucrase nodemon -D
troca por ex. o const app = require('./app'); por import  app from './app';

Rodando servidor com sucrase
>> yarn sucrase-node src/server.js

Nodemon detecta alteração no codigo e reinicia o servidor de forma automatica
Insira no package.json abaixo de license
 "scripts":{
    "dev": "nodemon src/server.js"
  },

>> yarn dev


Instalar DOCKER
>> sudo apt-get upadate
remover primeiro
>> sudo apt-get remove docker-engine docker.import
>> sudo apt install docker.import
>> sudo systemctl start docker
>> systemctl status docker
>> sudo systemctl enable docker
>> docker --version
>> sudo docker run hello-world
Retirar o super usuario (sudo)
>> sudo groupadd docker
>> sudo usermod -aG docker $USER
reinicia a maquina
>> docker run hello-word
ver as imagens
>> docker images

Usando docker e database
>>docker run --name database -e POSTGRES_PASSWORD=docker -p 5432:5432 -d postgres
>> docker ps

PostBird
>>sudo snap install postbird

para startar o contenner novamente
>> docker start database

verificar erros no contenner
>> docker logs database

Instalar eslint (verifica se o codg esta seguindo padroes)
>> yarn add eslint
>> yarn eslint --init


Instalar prettier
>> yarn add prettier eslint-config-prettier eslint-plugin-prettier -D

salvar todos os arquivos para pegar as atualizações
>> yarn eslint --fix src --ext .js
->sequelize<-
Instalar dependencias
>>yarn add sequelize-cli -D
>> yarn add sequelize
usando o postgres
>>yarn add pg pg-hstore

Criando migrations
>> yarn sequelize migration:create --name=create-users
testar se esta funcionando a primeira migration
>>yarn sequelize db:migrate

caso ainda não enviou as migrations p/demais e deseja corrigir um erros
>> yarn sequelize db:migrate:undo (desfaz a ultima migrate)
>> yarn sequelize db:migrate:undo:all (desfaz todas migrate)



Usar senha
>> yarn add bcryptjs
token
>>yarn add jsonwebtoken


lidando cm validação
>> yarn add yup


Lidando com implementação de avatar na aplicação
>> yarn add multer

criando nova tabela no DB
>> yarn sequelize migration:create --name=create-files
>> yarn sequelize db:migrate

Relacionando tabela user com file atraves de migrations
>> yarn sequelize migration:create --name=add-avatar-field-to-users
>> yarn sequelize db:migrate


*****tipos de relacionamentos*****

*hasOne() -> tem um = Id do usuario dentro da tabela arquivo

*belongsTo() -> ex o model de usuario pertence a um model de file
this.belongsTo(models.File) um id de arquivo sendo armazenado nomodel de usuario
podendo passar o nome da coluna que vai armazenar a referencia de arquivo
this.belongsTo(models.File,{ foreignKey: 'avatar_id})

*hasMany() -> id de usuario dentro de varios registro de arquivos


Regras de negocio
lidando com database
>>yarn add date-fns@next

LIdando com Bandco de Dados Mongo DB
subir contenner com Docker
>> docker run --name mymongobarber -p 27017:27017 -d -t mongo
verificar a funcionalidade= no navegador(localhost:27017)
Instalar Mongoose
>> yarn add mongoose
>> sudo apt install mongodb-server
>> mongod: inicializa o servidor de banco de dados



/*Biblioteca de email*/
>> yarn add nodemailer
alguns serviços de email:
Amazon SES, Mailgun, Sparkpost, Mandril (Mailchimp), Gmail, Mailtrap(amb dev)

template de email
>> yarn add express-handlebars nodemailer-express-handlebars
